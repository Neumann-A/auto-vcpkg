if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore" OR CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone")
    set(Z_VCPKG_TARGET_TRIPLET_PLAT uwp)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux"))
    set(Z_VCPKG_TARGET_TRIPLET_PLAT linux)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin"))
    set(Z_VCPKG_TARGET_TRIPLET_PLAT osx)
elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
    set(Z_VCPKG_TARGET_TRIPLET_PLAT ios)
elseif(MINGW)
    set(Z_VCPKG_TARGET_TRIPLET_PLAT mingw)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows"))
    set(Z_VCPKG_TARGET_TRIPLET_PLAT windows)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD"))
    set(Z_VCPKG_TARGET_TRIPLET_PLAT freebsd)
endif()

if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR
   CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR
   CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64")
  set(Z_VCPKG_TARGET_TRIPLET_ARCH x64)
elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "s390x")
  set(Z_VCPKG_TARGET_TRIPLET_ARCH s390x)
elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "ppc64le")
  set(Z_VCPKG_TARGET_TRIPLET_ARCH ppc64le)
elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "armv7l")
  set(Z_VCPKG_TARGET_TRIPLET_ARCH arm)
elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64|ARM64)$")
  set(Z_VCPKG_TARGET_TRIPLET_ARCH arm64)
endif()

if(EMSCRIPTEN)
    set(Z_VCPKG_TARGET_TRIPLET_ARCH wasm32)
    set(Z_VCPKG_TARGET_TRIPLET_PLAT emscripten)
endif()

set(triplet_suffix "")
set(crt_linkage "dynamic")

if(NOT BUILD_SHARED_LIBS)
  string(APPEND triplet_suffix "-static")
endif()
if(CMAKE_MSVC_RUNTIME_LIBRARY MATCHES "DLL")
  string(APPEND triplet_suffix "-md")
endif()
if(VCPKG_USE_SINGLE_CONFIG)
  string(APPEND triplet_suffix "-rel")
endif()

set(VCPKG_TARGET_TRIPLET "${Z_VCPKG_TARGET_TRIPLET_ARCH}-gen-${Z_VCPKG_TARGET_TRIPLET_PLAT}${triplet_suffix}")

include(CheckLanguage)
check_language(CXX)

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND MSVC)
#TODO ENV passthrough and extra setup?
endif()

### Read manifest for per port customization
set(PER_PORT_CUSTOMIZATION "")
file(READ "${VCPKG_MANIFEST_DIR}/vcpkg.json" manifest_contents)
string(JSON dep_length ERROR_VARIABLE error_var LENGTH "${manifest_contents}" "dependencies")
if(dep_length)
  foreach(index RANGE "${dep_length}")
    string(JSON dep_name ERROR_VARIABLE error_var GET "${manifest_contents}" "dependencies" "${index}" "name")
    if(NOT dep_name)
      continue()
    endif()
    string(JSON dep_linkage ERROR_VARIABLE error_var GET "${manifest_contents}" "dependencies" "${index}" "$linkage")
    if(NOT dep_linkage)
      continue()
    endif()
    if(NOT (dep_linkage STREQUAL "static" OR dep_linkage STREQUAL "dynamic"))
      message(SEND_ERROR "[auto-vcpkg] Error: Invalid linkage of '${dep_linkage}' found for port '${dep_name}'")
    endif()
    string(APPEND PER_PORT_CUSTOMIZATION "\nif(PORT STREQUAL \"${dep_name}\")")
    string(APPEND PER_PORT_CUSTOMIZATION "\n  set(VCPKG_LIBRARY_LINKAGE \"${dep_linkage}\")")
    string(APPEND PER_PORT_CUSTOMIZATION "\nendif()")
  endforeach()
endif()

configure_file("${CMAKE_CURRENT_LIST_DIR}/triplet.in.cmake" "${VCPKG_GENERATE_DIR}/${VCPKG_TARGET_TRIPLET}-tmp.cmake" @ONLY)

file(READ "${VCPKG_GENERATE_DIR}/${VCPKG_TARGET_TRIPLET}-tmp.cmake" triplet_tmp_contents)
if(EXISTS "${VCPKG_GENERATE_DIR}/${VCPKG_TARGET_TRIPLET}.cmake")
  # Avoid updating the triplet if the contents are equal. 
  file(READ "${VCPKG_GENERATE_DIR}/${VCPKG_TARGET_TRIPLET}.cmake" triplet_contents)
endif()
if(NOT "${triplet_tmp_contents}" STREQUAL "${triplet_contents}")
  file(WRITE "${VCPKG_GENERATE_DIR}/${VCPKG_TARGET_TRIPLET}.cmake" "${triplet_tmp_contents}")
endif()

message(STATUS "Automatically generated triplet: ${VCPKG_TARGET_TRIPLET}")
